version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.      
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Delete S3 files
          when: on_fail
          command: aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - run:
          name: Destroy Frontend Infrastructure
          when: on_fail
          command: aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.        
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: ce874b2c-9ce6-4944-9e6b-dcfa6830bada" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == 1 ));
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install            
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add url to memstash
          command: |
            BACKEND_URL=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)
            
            curl -H "Content-Type: text/plain" -H "token: ce874b2c-9ce6-4944-9e6b-dcfa6830bada" \
              --request PUT --data "$BACKEND_URL" https://api.memstash.io/values/backend_url
      - destroy-environment      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "25:62:56:b9:d8:ec:1d:f2:5b:e5:92:4e:60:ed:7c:1b"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl
            pip3 install awscli
            
      - run:
          name: Configure server
          command: |           
            echo $(curl -H "token: ce874b2c-9ce6-4944-9e6b-dcfa6830bada" --request GET https://api.memstash.io/values/backend_url) >> .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment      

  run-migrations:
    docker:
      - image: python:3.8.6-alpine3.12
    steps:
      - checkout
      - run:
          name: Install dependencies
          become: true
          command: |            
            apk add nodejs npm curl
            pip3 install awscli
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install
            npm run migrations | tee migration_results.txt
            echo "Migration result:"
            cat migration_results.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations.txt
            then
              curl -H "Content-Type: text/plain" -H "token: ce874b2c-9ce6-4944-9e6b-dcfa6830bada" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              curl -H "Content-Type: text/plain" -H "token: ce874b2c-9ce6-4944-9e6b-dcfa6830bada" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - revert-migrations
      - destroy-environment      

  deploy-frontend:
    docker:
      - image: python:3.8.6-alpine3.12
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          become: true
          command: |
            apk add tar gzip ansible nodejs npm curl
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            export API_URL=`cat API_URL`
            cd frontend
            npm install
            npm update
            npm run build
            npm audit fix --audit-level=critical --force
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
      - destroy-environment 
           
                    
  deploy-backend:
    docker:
      - image: python:3.8.6-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "25:62:56:b9:d8:ec:1d:f2:5b:e5:92:4e:60:ed:7c:1b"
      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm gzip curl tar
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            echo $(curl -H "token: ce874b2c-9ce6-4944-9e6b-dcfa6830bada" --request GET https://api.memstash.io/values/backend_url) >> .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - revert-migrations
      - destroy-environment  

  smoke-test:
    docker:
      - image: python:3.8.6-alpine3.12
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(curl -H "token: ce874b2c-9ce6-4944-9e6b-dcfa6830bada" --request GET https://api.memstash.io/values/backend_url)
            
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="https://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-eu-west-2.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      - revert-migrations
      - destroy-environment  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            echo Old Workflow Id: "${OldWorkflowID}"

            
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople              

      - revert-migrations   

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
              
            export STACKS=($(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo Old Workflow Id: "${OldWorkflowID}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}              
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [master]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [master]